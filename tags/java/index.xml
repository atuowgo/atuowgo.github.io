<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - 标签 - 程序猿二腊</title>
        <link>https://atuowgo.github.io/tags/java/</link>
        <description>Java - 标签 - 程序猿二腊</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 16 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://atuowgo.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>动态路由:Gin vs SpringMVC</title>
    <link>https://atuowgo.github.io/notes-006-ginvsmvc/</link>
    <pubDate>Mon, 16 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/notes-006-ginvsmvc/</guid>
    <description><![CDATA[这两天在接触Gin，对它的动态路由功能比较感兴趣，特意做了笔记，顺便跟SpringMVC作下对比。
1.简介 Gin是使用Go/golang语言实现的HTTP Web框架。接口简洁,性能极高。截止1.4.0版本,包含测试代码,仅14K,其中测试代码9K左右,也就是说框架源码仅5K左右。SpringMVC不用过多介绍，Java市场的一把手。
Gin支持动态路由，简单示例如下：
1 2 3 4 5 6 7 8 9 10 11 12 import ( &#34;github.com/gin-gonic/gin&#34; &#34;net/http&#34; ) func main() { r := gin.Default() r.GET(&#34;/hello/:name&#34;, func(context *gin.Context) { context.String(http.StatusOK, &#34;Hello : &#34;+context.Param(&#34;name&#34;)) }) r.Run() } 对比SpringMVC的例子为：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloWorldController { @RequestMapping(&#34;/hello/{name}&#34;) public String antUser (@PathVariable(&#34;name&#34;) String name) { return &#34;Hello : &#34; + name; } } 二者有相似的地方。]]></description>
</item>
<item>
    <title>Java的EOF标识？</title>
    <link>https://atuowgo.github.io/notes_001_java_eof/</link>
    <pubDate>Sat, 28 Sep 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/notes_001_java_eof/</guid>
    <description><![CDATA[这篇是关于JAVA中EOF标识的讲解，之前在工作上碰到过一个问题，有人问过，不能通过判断EOF来知道文件有没有读取完毕吗？其实，还真不能。
直接从JDK接口文档入手，以FileInputStream为例，JDK接口文档给出了明确的说明：
使用FileInputStream的read方法读取文件时，当返回-1就表明读到了文件末尾，如果期间出现IO异常，则会抛出一个IOException。而对于EOF文件结束符，其实是不存在的。在Linux系统之中，EOF根本不是一个字符，而是当系统读取到文件结尾，所返回的一个信号值，例如在C语言中，EOF是一个定义在头文件stdio.h的常量，一般等于-1。对于JAVA的实现，我们可以通过查看FileInputStream的源码查看，如下：
其中read0为native方法，需要查看jvm源码。根据JVM源码定位进去，发现read0调用readSingle方法：
源码看这FileInputStream.c（http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5b86f66575b7/src/share/native/java/io/FileInputStream.c）
而readSingle方法位于io_util.c中：
搓这里io_util.c（http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5b86f66575b7/src/share/native/java/io/io_util.c） 跟踪IO_Read方法，可以得到如下源码实现：
源文件分别位于io_util_md.h(http://hg.openjdk.java.net/jdk/jdk/file/bd45ce23b1ac/src/java.base/unix/native/libjava/io_util_md.h)和io_util_md.c(http://hg.openjdk.java.net/jdk/jdk/file/bd45ce23b1ac/src/java.base/unix/native/libjava/io_util_md.c)
所以，其实read方法最后还是调用了操作系统的read方法,该方法跟具体的操作系统相关，在linux下，有如下的说明 也就是，当使用read方法去读文件时，如果读到了文件末尾，没有字符返回时，则该方法返回0，如果出现异常，则返回-1.然后，JDK在readSingle方法里进行了包装，如果返回0，则在JDK层面返回-1，如果返回-1，则抛出IOException.因而，JAVA中没有EOF这个标识符，而是使用-1来标识文件结束。]]></description>
</item>
</channel>
</rss>
