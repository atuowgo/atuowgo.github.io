<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring - 标签 - 程序猿二腊</title>
        <link>https://atuowgo.github.io/tags/spring/</link>
        <description>Spring - 标签 - 程序猿二腊</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 07 Jan 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://atuowgo.github.io/tags/spring/" rel="self" type="application/rss+xml" /><item>
    <title>Spring MVC</title>
    <link>https://atuowgo.github.io/07-spring-mvc/</link>
    <pubDate>Tue, 07 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/07-spring-mvc/</guid>
    <description><![CDATA[这节介绍SpringMVC，SpringMVC是一种基于Java的实现MVC设计模式的请求驱动类型的轻量级Web框架。本章会介绍相关概念，流程，再从源码进行讲解。
1. MVC MVC(Model View Controller)是一种软件设计的框架模式，它采用模型(Model)-视图(View)-控制器(controller)的方法把业务逻辑、数据与界面显示分离。MVC框架模式是一种复合模式，MVC的三个核心部件分别是
Model(模型)：所有的用户数据、状态以及程序逻辑，独立于视图和控制器
View(视图)：呈现模型，类似于Web程序中的界面，视图会从模型中拿到需要展现的状态以及数据，对于相同的数据可以有多种不同的显示形式(视图)
Controller(控制器)：负责获取用户的输入信息，进行解析并反馈给模型，通常情况下一个视图具有一个控制器
2. SpringMVC流程 基本上大家都会在网上看到这张图： 这个图描述了SpringMVC处理一个Http请求的基本流程，对应的流程为：
用户发送请求至前端控制器DispatcherServlet。 DispatcherServlet收到请求调用HandlerMapping处理器映射器。 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 DispatcherServlet调用HandlerAdapter处理器适配器。 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。 Controller执行完成返回ModelAndView。 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。 ViewReslover解析后返回具体View. DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。 DispatcherServlet响应用户。 还有大家都会接触到的demo:
web.xml
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;web-app xmlns=&#34;http://xmlns.jcp.org/xml/ns/javaee&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&#34; version=&#34;4.0&#34;&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 在applicationContext.]]></description>
</item>
<item>
    <title>Spring AOP</title>
    <link>https://atuowgo.github.io/06-spring-aop/</link>
    <pubDate>Sat, 30 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/06-spring-aop/</guid>
    <description><![CDATA[这节介绍Spring AOP。关于Spring AOP的名字就不多做介绍了，网上有很多对AOP的解释。
1. 概念术语 1.1 切面（Aspect）
切面是一个关注点的模块化，这个关注点可能是横切多个对象；
1.2 连接点（Join Point）
连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候；
1.3 通知（Advice）
指在切面的某个特定的连接点上执行的动作。Spring切面可以应用5种通知：
前置通知（Before）：在目标方法或者说连接点被调用前执行的通知；
后置通知（After）：指在某个连接点完成后执行的通知；
返回通知（After-returning）：指在某个连接点成功执行之后执行的通知；
异常通知（After-throwing）：指在方法抛出异常后执行的通知；
环绕通知（Around）：指包围一个连接点通知，在被通知的方法调用之前和之后执行自定义的方法。
1.5 切点（Pointcut）
指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法。
1.4 引入（Introduction）
引入也被称为内部类型声明，声明额外的方法或者某个类型的字段。
1.5 目标对象（Target Object）
目标对象是被一个或者多个切面所通知的对象。
1.6 AOP代理（AOP Proxy）
AOP代理是指AOP框架创建的对象，用来实现切面（包括通知方法等功能）
1.7 织入（Wearving）
指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程。
2. 入口 AOP的一般配置如下：
之前BeanDefiniton解析那节提到，XML的解析在classpath下META-INF的spring.handlers里。查看spring-aop模块可以看到如下配置
1 http\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler 该处理类如下
可以看到配置文件的处理交由
1 org.springframework.aop.config.ConfigBeanDefinitionParser 来处理，该类实现了BeanDefinitionParser接口，该接口的实现内容如下：
该方法主要完成两件事，
注册AspectJAwareAdvisorAutoProxyCreator
解析pointcut,advisor,aspect节点
下面重点看下这两点
3. AspectJAwareAdvisorAutoProxyCreator AspectJAwareAdvisorAutoProxyCreator的继承结构如下：
该类在父类AbstractAutoProxyCreator那实现了接口SmartInstantiationAwareBeanPostProcessor，AbstractAutoProxyCreator主要实现了 方法
1 postProcessBeforeInstantiation 和方法
1 postProcessAfterInitialization postProcessBeforeInstantiation会在bean实例化前执行，如果返回非null，则不会实例化该bean。 postProcessAfterInitialization会在bean实例化并初始化后执行，如果返回非null，则使用该实例，否则使用原Bean对象。即对目标对象的包装可以发生在实例化前，也可以发生在初始化后。
3.1. postProcessBeforeInstantiation 如上图示：
在beanName为空或者目标类不包含该beanName的前提下，如果该bean是通知执行对象(advisedBeans)则不进行代理；如果为基础类且需要跳过则不进行代理，同时会将其标记为非通知执行对象。
如果该beanName设置了TargetSource，则调用createProxy方法为该beanName创建代理对象，并将其进行标记，存于targetSourceBeans字段中。这里调用createProxy方法前会调用getAdvicesAndAdvisorsForBean方法获取该bean上设置的通知点。]]></description>
</item>
<item>
    <title>Spring DestroySingleton流程</title>
    <link>https://atuowgo.github.io/05-spring-destorybean/</link>
    <pubDate>Sun, 13 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/05-spring-destorybean/</guid>
    <description><![CDATA[ 第一节介绍Spring启动(链接)时，介绍AbstractApplicationContext的过销毁过程，主要是调用了内部的destroyBeans方法，这节便来介绍bean的销毁过程。
一.销毁流程 destroyBeans方法内部委托给了DefaultSingletonBeanRegistry的destroySingletons方法。destroySingletons方法如下，比较清晰:
前面介绍过，DefaultSingletonBeanRegistry用一个Map缓存着所有的单例实例，对于对象的销毁，只要简单的将其从Map中移除就行。主要处理的是依赖关系下的bean销毁顺序以及回调接口的处理。上面先对disposableBeans中所涉及到的bean逐个进行销毁，然后再清理所有的依赖关系和缓存的单例实例。
上一节提到，disposableBeans中存放的是存在销毁时需要进行方法回调的DisposableBeanAdapter对象，key为对应的bean name，会在bean初始化后进行判断并且存入。这里会优先处理这些bean的销毁，下面重点介绍下destroySingleton方法。
二.destroySingleton 如上描述了该方法的大致过程，分别为
将DefaultSingletonBeanRegistry中缓存的各种单例实例清除掉
执行disposableBeans.remove方法，移除该beanName，这里会返回一个DisposableBean对象
删除dependentBeanMap中beanName的内容，也是执行remove的方法，会返回依赖于beanName的其他bean name列表，再依次调用destorySingleton销毁这些bean
对当前的DisposableBean执行destory
删除containedBeanMap中beanName的内容，执行的remove方法，hi返回beanName依赖的其他bean name列表，再依次调用destorySingleton销毁这些bean 从而具体的回调发生在第4步，开头提到，bean在实例化后会以DisposableBeanAdapter存放进disposableBeans中，从而该类实现了具体的回调过程。
三.DisposableBeanAdapter DisposableBeanAdapter的结构如下，其实现了DisposableBean接口，因而可以如上面说的，在destroySingleton方法进行回调。它在构造方法中对几个重要的属性进行了赋值，用于存储销毁动作相关的信息，包括：
Bean：待销毁bean对象
beanName：待销毁bean的beanName
destroyMethodName：待销毁要调用的方法，该方法来源于destory-method配置项，如果为(inferred)，则会将回调方法赋值为close或者shutdown
destoryMethod：destoryMethodName对应的Method对象
beanPostProcessors：需要处理该bean的DestructionAwareBeanPostProcessor回调列表。在实例化DisposableBeanAdapter对象时，会过滤系统中的BeanPostProcessor列表，找出实现DestructionAwareBeanPostProcessor接口，且requiresDestruction方法返回true的实例，用于后续进行回调。（InitDestroyAnnotationBeanPostProcessor类实现了该方法，用以回调@PreDestory注解的方法，CommonAnnotationBeanPostProcessor继承自该类，设置了destroyAnnotationType为PreDestroy.class）
当按照第（二）部分第4步执行时，该类会按照如下顺序执行销毁动作：
如果beanPostProcessors列表不为空，则回调DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法，即执行@PreDestory注解方法 如果实现了DisposableBean，则回调DisposableBean的destroy方法，即执行DisposableBean接口方法 如果配置了destroy-method，则执行配置的方法，即执行destory-method配置方法 ]]></description>
</item>
<item>
    <title>Spring GetBean的流程</title>
    <link>https://atuowgo.github.io/04-spring-getbean/</link>
    <pubDate>Sun, 06 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/04-spring-getbean/</guid>
    <description><![CDATA[第一节讲解Spring启动（链接）的时候说到，Spring内部先解析了所有的配置，加载所有的Bean定义后，再根据需要对Bean进行实例化和初始化。除开Spring自己主动新建的对象，第一次根据Bean定义加载对象的动作出现在AbstractApplicationContext的invokeBeanFactoryPostProcessors方法，该方法会在Spring容器中找出实现了BeanFactoryPostProcessor接口的bean列表并执行。根据之前介绍的内容，内部主要调用了AbstractBeanFactory的getBean方法，这节将对该方法进行讲解。
一、getBean 在这之前，先介绍BeanFactory的层次结构，如下：
涉及到的接口和实现类为：
AliasRegistry：别名管理接口，定义了别名管理的功能
SimpleAliasRegistry：AliasRegistry的默认实现，内部用一个
ConcurrentHashMap：管理别名
SingletonBeanRegistry：单例实例管理接口，定义了单例管理的功能
DefaultSingletonBeanRegistry：单例管理实现类，内部用Map维护着被实例化后的所有单例、单例工厂等相关信息。Map的键为bean的唯一标识，Spring内部成为raw name，一般等同于Bean定义中的id或者name或者别名等，具体规则可以从上节BeanDefinition的加载查看（链接），值为相应的对象实例。这边需要指出的一点时，对于bean定义中具有别名意义的字段，如一定情况下的name以及alias字段，只存在于SimpleAliasRegistry维护的内部Map中，通过递归查询的方式可以从一个给定的别名查找到指定的id。
如下，DefaultSingletonBeanRegistry维护的Map中存在key为testBean，value为TestBean的对象，SimpleAliasRegistry维护的Map中存在Key为testBeanAlias1，value为testBean的记录。当通过testBeanAlias1查找bean时，会先通过AliasRegistry查找到testBean，再从通过BeanRegistry查找到对应的Bean实例。
FactoryBeanRegistrySupport：增加缓存FactoryBean实例功能，DefaultSingleBeanRegistry在生成单例后便不再持有对应的FactoryBean
BeanFactory：定义了Bean容器的基本查询接口，同时设定了以&amp;前缀来区别工厂Bean，即如果beanName前面有&amp;则返回对应Bean的工厂Bean对象而不是该Bean对象。
HierarchicalBeanFactory：在BeanFactory接口上增加了父子层级关系，以实现双亲委托。
ConfigurableBeanFactory：按照规矩，增加了修改功能的接口，同时增加了Scope特性，默认分为single单例和prototype多例。
AbstractBeanFactory：BeanFacoty的基本实现。
AbstractBeanFactory的getBean方法内部调用了doGetBean，该方法提供了根据beanName获取实例的具体实现，代码如下(删除了相关的注释和空格)：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException { /*(1)*/ final String beanName = transformedBeanName(name); Object bean; /*(2)*/ Object sharedInstance = getSingleton(beanName); /*(3)*/ if (sharedInstance !]]></description>
</item>
<item>
    <title>Spring BeanDefinition的加载</title>
    <link>https://atuowgo.github.io/03-spring-bean-load/</link>
    <pubDate>Fri, 04 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/03-spring-bean-load/</guid>
    <description><![CDATA[前面提到AbstractRefreshableApplicationContext在刷新BeanFactory时，会调用loadBeanDefinitions方法以加载系统中Bean的定义，下面将讲解Bean定义的加载过程。
一．XML定义 XML配置的加载由AbstractXmlApplicationContext实现，方法实现如下：
主要是实例化了一个XmlBeanDefinitionReader对象，对其设置了Environment对象（具体过程可以上一篇）等后，调用XmlBeanDefinitionReader进行解析。直接跟踪进去，得到如下内容：
其中参数inputSource为XML配置文件，Resource则该配置文件的描述，主要描述了该配置文件在classpath中的位置和可用于加载该配置文件的加载器。doLoadDocument方法比较简单，主要是加载指定的配置文件，返回一个JDK内置的XML解析Document对象，以便于解析XML DOM节点。
重点看下registerBeanDefinitions方法，如下：
该方法最终委托给了BeanDefinitonDocumentReader来完成Bean的解析。在这之前，初始化了一系列相关对象。包括：
使用DefaultBeanDefinitionDocumentReader作为BeanDefinitionDocumentReader接口的实现
创建了一个XmlReaderContext用于保存解析过程中使用到的各个相关对象，如资源描述对象Resource、ReaderEventListener事件监听器、XmlBeanDefinitionReader以及NamespaceHandlerResolver命名空间解析器。其中划重点的是DefaultNamespaceHandlerResolver，该类完成了自定义XML格式的解析，后面会有讲解。
初始相关对象后便将解析过程委托给了DefaultBeanDefinitionDocumentReader来进行处理，该类的重点为parseBeanDefinitions方法，在调用该方法前，先初始化了一个BeanDefinitionParserDelegate对象，如下：
并将该delegate对象传入了parseBeanDefinitions方法。BeanDefinitionParserDelegate主要提供了命名空间为http://www.springframework.org/schema/beans（下面简写为beans空间）的XML文件解析过程。该命名空间定义了4个主要的XML标签，分别为beans、bean、import和alias以及这些标签对应的属性，如下为该命名空间的示例，定义了一个基础的Bean。
需要注意的是，上面在初始化BeanDefinitionParserDelegate后会先解析XML上&lt;beans&gt;标签上的默认属性，包括：default-lazy-init、default-merge、default-autowire、default-dependency-check、default-autowire-candidates、default-init-method和default-destroy-method这些全局属性。
下面看下parseBeanBefinitoins方法：
该方法会对当前节点所属命名空间进行判断，分为默认命名空间和自定义命名空间，其中默认命名空间指的是上面提到的beans空间。对于默认命名空间，会逐一解析每个DOM子节点，判断子节点的命名空间，最终委托给两个方法：处理默认命名空间的parseDefaultElement方法和处理自定义命名空间的parseClustomElement方法。
parseDefautlElement方法如上， 对beans空间定义的各个标签分别进行了处理：
解析import标签时，会读取resource属性指定的配置文件，加载后再解析该文件中的bean定义。
解析alias标签时，读取标签的name和alias属性，添加到BeanRegistry缓存中。
解析bean标签时，直接委托给BeanDefinitionParserDelegate来处理，过程为：
获取id属性值作为beanName
获取name属性值作为aliases，该属性值可以配置多个，以 , 或者 ; 符进行分割，将作为该bean的别名使用；若id指为空，且name不为空，则使用第一个name值作为id值
检查beanName和aliases的唯一性
解析bean其他配置，生成GenericBeanDefinition对象
若beanName为空，则为其分配一个
对于步骤3.d，处理过程为：
获取class属性值
获取parent属性值
初始化GenericBeanDefinition实例
解析bean节点的属性，设置到BeanDefinition中，包括：scope、abstract、lazy-init、autowired、dependency-check、autowire-candidate、primary、init-method、destroy-method、factory-method、factory-bean
解析description子节点，获取值设置bean的描述内容
解析meta子节点列表，获取key、value值设置附加元数据信息
解析lookup-method子节点列表，获取name、bean值设置方法注入信息
解析replaced-method子节点列表，获取值设置需要动态代理的方法信息
解析constructor-arg子节点列表，获取值设置构造参数信息
解析property子节点列表，获取值设置属性信息
解析qualifier子节点列表，获取值进行设置
上面解析完bean的配置后，会再处理子节点中其他命名空间的配置，使用NamespaceHandler的decorate方法，用以修改Bean定义内容，这部分将使用下面的内容，放在后面一起讲。
解析beans标签时，会进行递归处理 如上，默认命名空间主要用于解析bean的定义，经过上面的处理，bean定义的解析就已经完成，会将实例对象注册到上下文中进行保存
下面介绍parseClustomElement方法，顾名思义，该方法主要用来处理自定义命名空间的XML标签的，可以当做是spring XML配置处理的一种扩展手段，如下，为该方法的内容：
主要委托给了NamespaceHandlerResolver，通过查找到对应节点对应命名空间的Handler，调用该Handler的parse方法进行处理。
前面说过，NamespaceHandlerResolver使用了DefaultNamespaceHandlerResolver作为实现，跟踪resolve方法进去如下：
过程为：
获取已有的Handler处理列表，返回结果为一个Map，Key为XML命名空间，值可能为代表对应Handler类型的Spring对象或者已经实例化后的Handler对象，取决于之前是否已经调用过
若指为Handler对象，则直接返回
若为String对象，表明未初始化过，则初始化该类，并执行init初始化方法，然后将其重新返回Map中
对于第（1）步中Handler处理列表的获取，Spring会扫描classpath中所有位于META-INF中的spring.handlers配置文件，将所有内容读取到一个Map中并返回。
如上，为spring-context模块提供的spring.handlers文件，提供了该模块自定义命名空间标签的支持。如下为自定义命名空间的例子：
主要引入了context空间的spring-configured标签和annotation-config标签。
至此，介绍了XML配置下的bean解析。
二、注解配置 下面介绍Spring以注解的方式进行bean加载的过程，如下，为开启注解加载所需要的配置：
根据前面的内容，component-scan为http://www.springframework.org/schema/context命名空间中的标签，处理对象在spring-context模块的spring.handlers文件中定义，对应的是类org.springframework.context.config.ContextNamespaceHandler，如下：
查看该类，可以知道，component-scan由ComponentScanBeanDefinitionParser处理，如下：
主要过程为：
获取base-package属性内容赋值给basePackage
替换basePackage中的占位符内容
根据 , ; \t \n 分割符分割basePackage，得到多个包路径]]></description>
</item>
<item>
    <title>Spring Environment的加载</title>
    <link>https://atuowgo.github.io/02-spring-env/</link>
    <pubDate>Thu, 03 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/02-spring-env/</guid>
    <description><![CDATA[这节介绍environment，默认环境变量的加载以及初始化内容。
之前在介绍spring启动过程讲到，第一步进行环境准备时就会初始化一个StandardEnvironment。下图为Environment类图的接口，可以分为4块内容：
ConversionService（蓝）：类型转换服务
PropertySource（绿）:键值对数据源
PropertyResolver（红）:键值对服务，包括类型转换
Environment（紫）:环境配置数据服务
1.ConversionService 提供了类型转换服务，能将源目标转换为目标类型，同时提供了管理功能，内部维护了各类型转换映射关系。其实从ConversionService和ConverterRegistry接口就能看出该模块的功能，如下：
ConversionService接口为主要的对外功能接口，提供查询的能力。
ConverterRegistry接口为主要的管理接口，提供添加和删除的能力。而ConfigurableConversionService继承自上面二者，则提供了Converter的CRUD功能。结构上也延续了Spring固有的风格，将执行接口作为主要功能对外提供单一的接口，再通过继承的方式，以Configurable开头的子接口，扩展出管理功能，使得责任分离更加立体。
接下来是GenericConversionService类，该类提供了接口全部实现，下图展示了其主要实现:
GenericConversionService结构上可以说是一个小型的管理系统，内部维护了一个Converters对象，用于“底层”管理所有的GenericConverter。同时还维护了一个ConcurrentReferenceHashMap用于缓存常用的GenericConverter。
Converters在存储GenericConverter时还进行了分类，如果GenericConverter有指定能够解析的类别（ConvertiablePair：包括SourceType和TargetType）时，则使用一个LinkedHashMap按Key Value进行存储，在存储时会遍历可解析的类别，将该GenericConverter追加到对应的Value列表末尾，因而可以看到该Map的Value是一个LinkedList。对应没有指定能解析的类别的GenericConverter，则直接放到LinkedHashSet维护的集合中。
Converters在查询时会遍历源类型和目标类型的组合结果，以查找匹配的目标GenericConverter对象。如下：
对于getRegisteredConverter方法，会先使用Key从LinkedHashMap中查找是否有匹配的Converter,再遍历相应的Value,查找到能处理的转换器。若Map中无法查到，则遍历LinkedHashSet，以查到到能处理的转换器。
由上知道，Converters在查找时存在多次遍历列表的过程，在频率过多时效率会比较低下，因而GenericConversionService内部维护了一个ConcurrentReferenceHashMap提供缓存的功能，该Map提供了同ConcurrentHashMap相同的功能，但是能够存储对应的软引用，从而能在内存不足时自动进行内存回收。在查到转换器时，会先试着从缓存中查找，如果获取不到，则会转而从Converters中查找，当从Converters中查找到后便会put到ConcurrentReferenceHashMap缓存中。
DefaultConversionService是一个单例，继承自GenericConversionService，在初始化后自动添加了默认的转换器，包括Scalar相关的、集合相关的等转换器。
####2.PropertySource
PropertySource代表了一个包含键值对的数据源。从类定义上看，有一个表示数据源名字的name字段，还有一个表示具体数据源泛型T的source字段。而数据源的设置则是通过构造方法传入的，同时方法提供了通过键名获取键值的抽象方法getProperty。此外还有其他抽象方法，如containsProperty等。
EnumerablePropertySource继承自PropertySource，增加了getPropertyNames方法，要求子类返回内存持有的键名列表。同时实现了containsProperty方法，通过判断所给的键名是否存在上述返回的键名列表中从而判断是否包含该键名。
MapPropertySource继承自EnumerablePropertySource，顾名思义，内部通过Map维护各键值对内容。类似的还有PropertiesPropertySource，内部通过Properties维护各键值对内容。
SystemEnvironmentPropertySource是MapPropertySource的装饰器，继承自MapPropertySource，为其添加了键名转换功能，以应对环境变量、shell参数的环境。在通过键名获取键值时，会先根据原键名进行查找，查找不到则通过对键进行转换再尝试查找，具体查找过程为：
通过name查找
将name中的 . 转换为 _ 查找
将name中的 – 转换为 _ 查找
将name中的 . 和 _ 转换为 – 查找
将name转换为大写，再进行（1） - （4）的过程
PropertySources的实现如下，扩展了PropertySource接口，将单个数据源的能力扩展到了多个。MutablePropertySources作为PropertySources的实现，内部维护了一个List对象，用以存储给个数据源，并将自身的行为封装为List。
3.PropertyResolver PropertyResolver定义了一系列接口，以提供了对外根据键名获取相应值的功能，同时提供了类型转换和占位符替换的功能，是ConversionService和PropertySource的结合。ConfigurablePropertyResolver接口继承自PropertyResolver接口，老规则，扩展了设置的功能，主要是设置类型转换器和占位符的相关属性。
AbstractPropertyResolver提供了除PropertySource功能外的其余实现。使用DefaultConversionService作为默认的类型转换实现，使用 ${ 和 } 作为占位符的前后缀，使用:作为默认值分割符，同时引入PropertyPlaceholderHelper用于占位符的解析和替换。而getProperty的实现则留到了了子类PropertySourcesPropertyResolver中，其引入了PropertySources用以维护多个键值对数据源。获取指定属性值过程如下：
通过遍历数据源的方式，查到对应的值后，会进行占位符的替换，替换完占位符后会进行类型的转换。类型转换直接用的DefaultConversionService，这个上面已经介绍过了，下面介绍占位符替换。
占位符替换的功能是在PropertyResolver接口中定义的，分为严格和不严格模式，如下：
resolvePlaceholders为不严格模式，如果没法替换占位符，则直接忽略，resolveRequiredPlaceholders为严格模式，如果占位符没法替换则会抛出异常。如上面说的，AbstractPropertyResolver实现时都委托给PropertyPlaceholderHelper的replacePlaceholders方法。
如上，该方法要求传入一个源字符串，同时提供一个PlaceholderResolver数据源，一遍解析出占位符内容后能够从数据源中获取对应的值。为了保持类功能的单一职责，从而增加了一个内部接口PlaceholderResolver。上面提到，在这个模块中的键值对数据源都是由PropertySourcesPropertyResolver维护的，事实上上面方法截图的实现中，getPropertyAsRawString方法也确实是由PropertySourcesPropertyResolver提供实现的，下面看下占位符的解析。
占位符的解析过程如上流程，主要过程为：
根据${前缀得到startIndex
查找跟${前缀配对的}后缀，如${xxx${yy}z}，得到第二个}后缀的下标endIndex
截取${和}中间的内容得到placeholder
由于placeholder的内容可能也可能包含占位符，因而要递归处理placeholder，既占位符可以嵌套，内层的结果可以当做外层的Key使用
placeholder解析完后，将其作为Key从键值对源中获取对应的值propVal
如果propVal值为空，则判断是否存在:分割符，如果有分割符，则进行分割，并使用前端内容作为Key再次查找值。若该次查找结果不为空，则使用该次结果为propVal的值，否则使用第二段内容作为默认值
若第（5）/（6）步中propVal结果不为空，则判断从键值对源中获取的值是否也有占位符，若有占位符，则再次进行解析，若没有，则将结果替换回原字段中，更新startIndex，继续下次解析。
若第（5）/（6）步中propVal结果不空，则会根据设置的解析模式来判断下一步行为，如果未不严格模式，则跳过该次内容，更新startIndex，继续下一次解析，若为严格模式，则抛出异常，流程结束。
下面以一个例子进行演示，如下
输出结果为：
若将解析模式设置为严格模式则会抛出异常
4.Environment Environment继承自PropertyResolver接口，增加了Profiles功能，即我们平时看到的，多环境特性，能够在不同环境下加载不同的配置。ConfigurableEnvironment继承自Environment，老规矩，又是添加了修改的扩展接口，同时增加了获取系统参数的接口。另外，该接口也继承自ConfigurablePropertyResolver，有了键值对数据源管理、获取和处理的能力，集合Environment接口的功能，能够达到在不同环境下通过加载不同配置源实现环境隔离的效果。]]></description>
</item>
<item>
    <title>Spring启动流程</title>
    <link>https://atuowgo.github.io/01-spring-start/</link>
    <pubDate>Wed, 02 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>二腊</author>
    <guid>https://atuowgo.github.io/01-spring-start/</guid>
    <description><![CDATA[Spring用了挺久的了，但是没系统做过总结，刚好前段时间在做一个Spring封装的项目，趁机回顾了下，便基于Spring framework 4.3.22做了源码分析。
刚开始接触Spring时的入门例子大致如下：
设置配置文件路径，初始化ApplicationContext然后获取Bean，处理完后关闭context即可。这一节先来了解Spring的启动过程。
一. 启动 跟踪ClassPathXmlApplicationContext的构造方法可以看到如下内容：
里面设置了配置文件的路径，并且调用了父类AbstractApplicationContext的refresh方法，该方法完成了Spring环境的初始化。如下，为refresh方法的主要过程（为方便排版，去除了原来的注释和空格）：
下面将介绍各个方法步骤的内容，但不进行过多的深入，后面会单独对每个深入的细节进行详细的介绍，这节先介绍大概过程。
1.1. try 1.prepareRefresh PrepareRefresh的内容如上，该方法主要进行环境的准备，包括Context的启动时间，活动状态，然后会设置context中的配置数据源，使用默认的StandardEnvironment对象，该对象添加了System.env()属性和System.properties()属性。initPropertySources方法用于初始化context 中 environment的属性源。在AbstractApplicationContext中为空实现。其他子类的实现如下：
对于GenericWebApplicationContext和AbstractRefreshableWebApplicationContext的实现大致一致，都是:
通过在getEnvironment方法中，重写createEnvironment方法，将默认的StandardEnvironment替换为StandardServletEnvironment， Environment的关系图为：
因而会执行该类的initPropertySources方法，为context添加ServletContext和ServletConfig对应的配置属性源。具体的Environment中配置属性源的加载会在后面单独进行介绍。
2.obtainFreshBeanFactory 该方法的实现如下，通过refreshBeanFacotry重置AbstractApplicationContext持有的BeanFacotry，然后通过getBeanFacotry获得该对象再返回。
AbstractApplicationContext中refreshBeanFacoty方法和getBeanFactory方法都是抽象方法，具体实现在AbstractRefreshableApplicationContext上。
如上，增加了方法的注释，重点在于loadBeanDefinitions方法，该抽象方法在具体实现子类上用于处理不同场景下Bean定义的加载，如Xml配置，注解配置，Web环境等，具体实现会在后面展开。
目前，只是完成了Bean定义的加载，没有出现Bean的实例化。
3.prepareBeanFactory 为第2步返回的BeanFactory设置基础属性。包括：
设置ClassLoader
设置beanFactory的表达式语言处理器，默认使用EL表达式，可以使用#{bean.xxx}的形式来调用相关属性值
添加默认的属性编辑器
添加后置处理器ApplicationContextAwareProcessor，在Bean初始化后自动执行各Aware接口的set方法，包括ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware、EnvironmentAware
添加需要忽略的依赖注入类型，这些类型会在ApplicationContextAwareProcessor中通过BeanPostProcessor后置处理，包括第（4）点涉及的各内容
预先设置用于自动依赖注入的接口对象，包括BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
如果存在loadTimeWeaver这个Bean，则增加对应的后置处理器
如果不存在environment，systemProperties，systemEnvironment这3个默认的环境属性Bean，则注册对应的单例，这3个对象已经在第1步中初始化完成
具体可以看源码，这步主要预先设置公共的单例Bean并添加一些公共的后置处理动作，主要体现在BeanPostProcessor上。
4.postProcessBeanFactory 所有Bean的定义已经加载完成，但是没有实例化，这一步可以修改bean定义或者增加自定义的bean，AbstractApplicationContext中为空实现。
如上，以AbstractRefreshableWebApplicationContext为例，其增加了ServletContextAwareProcessor后置处理器，用于处理ServletContextAware接口和ServletConfigAware接口中相关对象的自动注入。同时新增了Web相关的应用范围，包括：request,session,globalSession和application，并增加了各范围默认的单例对象。最后增加了Web环境相关的环境配置Bean,包括servletContext，servletConfig，contextParameters和contextAttributes。
该步骤的功能同第3步类似，都能够增加一些后置处理器。
5.invokeBeanFactoryPostProcessors 在Spring容器中找出实现了BeanFactoryPostProcessor接口的Bean并执行。Spring容器会委托给PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法执行，内容如下：
invokeBeanFactoryPostProcessors在处理时，将BeanFactoryPostProcessor分为了两类进行处理，BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor，其中BeanDefinitionRegistryPostProcessor继承自BeanFactoryPostProcessor。执行的时候，先找出所有的BeanDefinitionRegistryPostProcessor执行再找出所有BeanFactoryPostProcessor执行。因为BeanDefinitionRegistryPostProcessor继承自BeanFactoryPostProcessor，所以执行后者时会过滤掉前者的内容。
在执行BeanDefinitionRegistryPostProcessor时，会按照如下的优先级，分类先执行postProcessBeanDefinitionRegistry方法，再统一执行所有的postProcessBeanFactory方法，，规则为：
筛选实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor实现
筛选实现了Ordered接口的BeanDefinitionRegistryPostProcessor实现，并执行
执行其他BeanDefinitionRegistryPostProcessors
在执行BeanFactoryPostProcessor也会按照如上的规则，执行BeanFactoryPostProcessor方法。
这里会实例化并初始化实现BeanFactoryPostProcessor接口的类并执行，若存在依赖的的Bean也会被初始化和实例化，具体的过程会在介绍Bean初始化过程时说明。
6.registerBeanPostProcessors 从Spring容器中找出的BeanPostProcessor接口的Bean，并添加到BeanFactory内部维护的List属性中，以便后续Bean被实例化的时候调用这个BeanPostProcessor进行回调处理。该方法委托给了PostProcessorRegistrationDelegate类的registerBeanPostProcessors方法执行。执行过程同步骤5类似，也是按照优先级进行了筛选，具体顺序为：
将实现PriorityOrdered接口的BeanPostProcessor列表注册到ApplicationContext中
将实现Ordered接口的BeanPostProcessor列表注册到ApplicationContext中
将剩余的BeanPostProcessor列表注册到ApplicationContext中
将实现MergedBeanDefinitionPostProcessor接口的BeanPostProcessor列表注册到ApplicationContext中
其中MergedBeanDefinitionPostProcessor接口继承自BeanPostProcessor接口，因而，上述第（4）点的列表同头三点的列表式存在交集的。但是，AbstraceApplicationContext在添加BeanPostProcessor时，会先将存在的对象删除，再添加新的，如下：
因而执行顺序为因而执行顺序为:PriorityOrdered、Ordered、NotOrdered、MergedBeanDefinitionPostProcessor。
这里会实例化并初始化实现BeanPostProcessor接口的类，但不执行，若存在依赖的的Bean也会被初始化和实例化。
7.initMessageSource 在Spring容器中初始化一些国际化相关的属性
8.initApplicationEventMulticaster 在Spring容器中初始化事件广播器对象SimpleApplicationEventMulticaster，并将该对象作为单例applicationEventMulticaster注册到Context中。该广播器用于广播ApplicationEvent事件对应的ApplicationListener接口Bean。
PS：根据以上的顺序，在这之前实例化的Bean，都不会经过BeanFactoryPostProcessor和BeanPostProcessor的处理，包括因为依赖而实例化的Bean,还有提前通过new注册的Bean（只有直接调用BeanFactory.getBean方法获取的bean才会进行后置回调）。这里需要注意，Context提前将两种后置处理器的所有实现都提前加载了，由于实例化前需要将依赖的Bean提前实例化，所以被这两种后置处理器依赖的Bean的初始化动作，是不会被其监听到的。
9.onRefresh 模板方法，可用于refresh动作的扩展，默认为空实现。在SpringBoot中主要用于启动内嵌的web服务器。
10.registerListeners 找出系统中的ApplicationListener对象，注册到时间广播器中。如果有需要提前进行广播的时间，则执行广播.
11.finishBeanFactoryInitialization 实例化BeanFactory中已经被注册但是未实例化的所有实例(懒加载的不需要实例化)，主要操作是BeanFacotry的preInstantiateSingletons方法。该方法分为两部分：]]></description>
</item>
</channel>
</rss>
